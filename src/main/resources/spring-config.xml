<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

        <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
        <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>

        <context:component-scan base-package="com">
            <context:exclude-filter type="annotation"
                                    expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>

        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <property name="mapperLocations" value="classpath:com/dao/mapper/*.xml"/>
            <property name="configLocation" value="classpath:mybatis-config.xml"/>
         </bean>

        <!--扫描所有mybatis的dao接口，生成代理实现类-->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.dao"/>
        </bean>

        <!--事务核心管理器，封装了所有事务操作，依赖于连接池-->
        <bean id="transactionManager"
              class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource"/>
        </bean>

        <!--配置事务通知-->
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <!-- 传播行为，匹配的是方法名 -->
                <tx:method name="add*" rollback-for="Exception"  />
                <tx:method name="persist*" rollback-for="Exception"/>

                <tx:method name="delete*" rollback-for="Exception"/>
                <tx:method name="remove*" rollback-for="Exception"/>

                <tx:method name="update*" rollback-for="Exception"/>
                <tx:method name="modify*" rollback-for="Exception"/>

                <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
                <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            </tx:attributes>
        </tx:advice>

    <!-- 通过AOP配置织入，让service包下所有Bean的所有方法拥有事务 -->
        <aop:config>
            <aop:pointcut id="serviceMethod" expression="execution(* com.service..*(..))"/>

            <!--配置切面：通知+切点
              advice-ref:通知名称
              pointcut:切点名称
            -->
            <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
        </aop:config>

</beans>